{"version":3,"file":"scripts/main.bundle.js","mappings":"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","sources":["webpack://bankan/./public/scripts/models/columnModel.ts","webpack://bankan/./public/scripts/services/columnService.ts","webpack://bankan/./public/scripts/services/taskService.ts","webpack://bankan/./public/scripts/utils/dragAndDrop.ts","webpack://bankan/./public/scripts/components/taskRenderer.ts","webpack://bankan/./public/scripts/components/columnRenderer.ts","webpack://bankan/./public/scripts/main.ts"],"sourcesContent":["export let columns = [];\n","import { columns } from '../models/columnModel';\nconst url = 'http://localhost:3000';\nexport async function getColumns() {\n    const getColumnUrl = url.concat('/api/columns');\n    try {\n        const response = await fetch(getColumnUrl);\n        if (!response.ok) {\n            throw new Error(`Response status: ${response.status}`);\n        }\n        const msg = await response.json();\n        return msg;\n    }\n    catch (error) {\n        if (error instanceof Error) {\n            console.error(error.message);\n        }\n        return [];\n    }\n}\nexport async function postColumn(newColumn) {\n    const postColumnUrl = url.concat('/api/columns');\n    try {\n        const response = await fetch(postColumnUrl, {\n            method: 'POST',\n            headers: {\n                'Content-type': 'application/json'\n            },\n            body: JSON.stringify(newColumn)\n        });\n        if (!response.ok) {\n            throw new Error(`Server error: ${response.status}`);\n        }\n        //const result = await response.json();\n        //console.log('Column created: ', result);\n    }\n    catch (error) {\n        if (error instanceof Error) {\n            console.error('Error posting column: ', error.message);\n        }\n    }\n}\nexport async function patchColumn(columnId, title) {\n    const patchColumnUrl = url.concat(`/api/columns/${columnId}`);\n    try {\n        const response = await fetch(patchColumnUrl, {\n            method: 'PATCH',\n            headers: {\n                'Content-type': 'application/json'\n            },\n            body: JSON.stringify({ title })\n        });\n        if (!response.ok) {\n            throw new Error(`Failed to add column. Server responded with ${response.status}`);\n        }\n        //const updateColumn = await response.json();\n        //console.log('Updated column: ', updateColumn);\n    }\n    catch (error) {\n        if (error instanceof Error) {\n            console.error(error);\n        }\n    }\n}\nexport async function deleteColumn(columnId) {\n    const deleteColumnUrl = url.concat(`/api/columns/${columnId}`);\n    try {\n        const response = await fetch(deleteColumnUrl, {\n            method: 'DELETE',\n            headers: {\n                'Content-type': 'application/json'\n            },\n        });\n        if (!response.ok) {\n            console.error(`Error deleting column: ${response.status}`);\n        }\n    }\n    catch (error) {\n        if (error instanceof Error) {\n            console.log(error);\n        }\n    }\n}\nexport async function loadColumns() {\n    const fetchedColumns = await getColumns();\n    columns.length = 0;\n    columns.push(...fetchedColumns);\n}\n","const url = 'http://localhost:3000';\nexport async function getTasks(columnId) {\n    const getTaskUrl = url.concat(`/api/columns/${columnId}/tasks`);\n    try {\n        const response = await fetch(getTaskUrl);\n        if (!response.ok) {\n            throw new Error(`Response status: ${response.status}`);\n        }\n        const msg = await response.json();\n        if (msg.success && Array.isArray(msg.tasks)) {\n            return msg;\n        }\n        return [];\n    }\n    catch (error) {\n        if (error instanceof Error) {\n            console.error(error.message);\n        }\n        return [];\n    }\n}\nexport const addTaskToColumn = async (columnId, title, description) => {\n    try {\n        console.log('columnId: ', columnId);\n        console.log('title: ', title);\n        console.log('description: ', description);\n        const response = await fetch(`/api/columns/${columnId}/tasks`, {\n            method: 'PATCH',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ title, description }),\n        });\n        if (!response.ok) {\n            throw new Error(`!response.ok: Failed to add task: ${response.statusText}`);\n        }\n        return { success: true, message: 'Task added' };\n    }\n    catch (error) {\n        console.error(error);\n        return { success: false, message: 'Failed to add task!' };\n    }\n};\nexport async function patchTaskTitle(columnId, taskId, title) {\n    const patchTaskTitleUrl = url.concat(`/api/columns/${columnId}/tasks/${taskId}`);\n    try {\n        const response = await fetch(patchTaskTitleUrl, {\n            method: 'PATCH',\n            headers: {\n                'Content-type': 'application/json'\n            },\n            body: JSON.stringify({ title })\n        });\n        if (!response.ok) {\n            throw new Error(`Failed to update task title. Server responded with ${response.status}`);\n        }\n        //const updateTaskTitle = await response.json();\n        //console.log('Updated task title: ', updateTaskTitle);\n    }\n    catch (error) {\n        if (error instanceof Error) {\n            console.error(error);\n        }\n    }\n}\nexport async function patchTaskDescription(columnId, taskId, description) {\n    const patchTaskDescriptionUrl = url.concat(`/api/columns/${columnId}/tasks/${taskId}`);\n    try {\n        const response = await fetch(patchTaskDescriptionUrl, {\n            method: 'PATCH',\n            headers: {\n                'Content-type': 'application/json'\n            },\n            body: JSON.stringify({ description })\n        });\n        if (!response.ok) {\n            throw new Error(`Failed to update task description. Server responded with ${response.status}`);\n        }\n        //const updateTaskTitle = await response.json();\n        //console.log('Updated task description: ', updateTaskTitle);\n    }\n    catch (error) {\n        if (error instanceof Error) {\n            console.error(error);\n        }\n    }\n}\nexport async function deleteTask(columnId, taskId) {\n    const deleteTaskUrl = url.concat(`/api/columns/${columnId}/tasks/${taskId}`);\n    try {\n        const response = await fetch(deleteTaskUrl, {\n            method: 'DELETE',\n            headers: {\n                'Content-type': 'application/json'\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Error deleting the task: ${response.status}`);\n        }\n        //console.log('Task deleted succesfully!');\n    }\n    catch (error) {\n        if (error instanceof Error) {\n            console.log(error);\n        }\n    }\n}\nexport async function updateTaskOrder(columnId, tasks) {\n    const updateTaskOrderUrl = url.concat(`/api/columns/${columnId}/reorder`);\n    try {\n        const response = await fetch(updateTaskOrderUrl, {\n            method: 'PATCH',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ tasks })\n        });\n        if (!response.ok) {\n            throw new Error(`Error updating task order: ${response.statusText}`);\n        }\n        //console.log('Task order updated successfully'); \n    }\n    catch (error) {\n        if (error instanceof Error) {\n            console.error('updateTaskOrder: ', error);\n        }\n    }\n}\nexport async function moveTask(sourceColumnId, targetColumnId, taskId) {\n    const moveTaskUrl = url.concat('/api/columns/moveTask');\n    try {\n        const response = await fetch(moveTaskUrl, {\n            method: 'PATCH',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ sourceColumnId, targetColumnId, taskId })\n        });\n        if (!response.ok) {\n            throw new Error(`Error moving task: ${response.statusText}`);\n        }\n        //console.log('Task order updated successfully'); \n    }\n    catch (error) {\n        console.error('Error moving task:', error);\n    }\n}\n","import { columns } from '../models/columnModel';\nimport { updateTaskOrder, deleteTask } from '../services/taskService';\nlet sourceColumnId = null;\nlet placeholder = null;\nexport function setupColumnsDragAndDrop() {\n    const columns = document.querySelectorAll('.column');\n    columns.forEach(column => {\n        column.addEventListener('dragover', (e) => handleDragOver(e));\n        column.addEventListener('dragenter', (e) => handleDragEnter(e));\n        column.addEventListener('dragleave', (e) => handleDragLeave(e));\n        column.addEventListener('drop', (e) => handleDrop(e));\n    });\n}\nexport function handleDragOver(e) {\n    e.preventDefault();\n    if (e.dataTransfer) {\n        e.dataTransfer.dropEffect = 'move';\n    }\n    const column = e.currentTarget;\n    const dragging = document.querySelector('.dragging');\n    if (dragging) {\n        const applyAfter = getNewPosition(column, e.clientY);\n        if (applyAfter && applyAfter !== placeholder) {\n            applyAfter.insertAdjacentElement('beforebegin', dragging);\n        }\n        else if (!applyAfter && column.lastElementChild !== placeholder) {\n            column.appendChild(dragging);\n        }\n    }\n}\nexport function getNewPosition(column, posY) {\n    const elements = Array.prototype.slice.call(column\n        .querySelectorAll('.task:not(.dragging)'));\n    for (const element of elements) {\n        const box = element.getBoundingClientRect();\n        const offset = posY - box.top - box.height / 2;\n        if (offset < 0) {\n            return element;\n        }\n    }\n    return null;\n}\nexport function handleDragEnter(e) {\n    const target = e.currentTarget;\n    target.classList.add('over');\n}\nexport function handleDragLeave(e) {\n    const target = e.currentTarget;\n    target.classList.remove('over');\n}\nexport function handleDrop(e) {\n    var _a;\n    e.preventDefault();\n    const data = (_a = e.dataTransfer) === null || _a === void 0 ? void 0 : _a.getData('text/plain');\n    let draggedElement;\n    if (data) {\n        draggedElement = document.getElementById(data);\n    }\n    const targetColumn = e.currentTarget;\n    targetColumn.classList.remove('over');\n}\nexport function setupTaskDragAndDrop(task) {\n    if (task._id) {\n        const taskElement = document.getElementById(task._id);\n        if (!taskElement) {\n            return;\n        }\n        const parentColumn = taskElement.closest('.column');\n        if (parentColumn) {\n            taskElement.setAttribute('data-column-id', parentColumn.id);\n        }\n        taskElement.addEventListener('dragstart', (e => handleDragStart(e, task)));\n        taskElement.addEventListener('dragend', (e => handleDragEnd(e, task)));\n    }\n}\nexport function removeTaskDragAndDrop(task) {\n    if (task._id) {\n        const taskElement = document.getElementById(task._id);\n        if (!taskElement) {\n            return;\n        }\n        const parentColumn = taskElement.closest('.column');\n        if (parentColumn) {\n            taskElement.setAttribute('data-column-id', parentColumn.id);\n        }\n        const clone = taskElement.cloneNode(true);\n        taskElement.replaceWith(clone);\n    }\n}\n/**\n* handler para quando a task iniciar o processo de drag\n* @param {DragEvent} e: DragEvent\n*/\nexport async function handleDragStart(e, task) {\n    const target = e.currentTarget;\n    console.log('(handleDragStart)');\n    if (e.dataTransfer) {\n        e.dataTransfer.effectAllowed = 'move';\n        if (task._id) {\n            e.dataTransfer.setData('taskId', task._id);\n        }\n    }\n    const targetColumn = e.currentTarget;\n    const columnElement = targetColumn.closest('.column');\n    if (task._id) {\n        sourceColumnId = columnElement.id;\n        //console.log('sourceColumnId: ', sourceColumnId);\n        deleteTask(sourceColumnId, task._id);\n    }\n    target.classList.add('dragging');\n    placeholder = document.createElement('div');\n    placeholder.classList.add('placeholder');\n    placeholder.style.height = `${target.offsetHeight}px`;\n}\n/**\n* handler para quando a task encerrar o processo de drag\n* @param {DragEvent} e: DragEvent\n*/\nexport async function handleDragEnd(e, task) {\n    const dragging = document.querySelector('.dragging');\n    //console.log('(handleDragEnd)');\n    if (dragging && placeholder) {\n        const targetColumn = e.currentTarget;\n        const columnElement = targetColumn.closest('.column');\n        if (columnElement && sourceColumnId) {\n            const targetColumnId = columnElement.id;\n            const columnIndex = columns.findIndex(column => column._id === columnElement.id);\n            if (task._id) {\n                const allTasks = columnElement.querySelectorAll('.task');\n                let newIndex = Array.from(allTasks).indexOf(dragging);\n                if (newIndex !== -1) {\n                    if (sourceColumnId === targetColumnId) {\n                        if (task._id) {\n                            //console.log('sourceColumnId === targetColumnId');\n                            const currentIndex = columns[columnIndex].tasks.findIndex((t) => t._id === task._id);\n                            columns[columnIndex].tasks.splice(currentIndex, 1);\n                            columns[columnIndex].tasks.splice(newIndex, 0, { title: task.title, description: task.description, _id: task._id });\n                            await updateTaskOrder(targetColumnId, columns[columnIndex].tasks);\n                        }\n                    }\n                    else {\n                        if (task._id) {\n                            //console.log('sourceColumnId !== targetColumnId');\n                            //await moveTask(sourceColumnId, targetColumnId, task._id);\n                            //console.log('columns (before splice newIndex): ', columns);\n                            columns[columnIndex].tasks.splice(newIndex, 0, { _id: task._id, title: task.title, description: task.description });\n                            //console.log('columns (after splice newIndex): ', columns);\n                            await updateTaskOrder(targetColumnId, columns[columnIndex].tasks);\n                        }\n                    }\n                }\n            }\n        }\n        placeholder.replaceWith(dragging);\n        dragging.classList.remove('dragging');\n        placeholder = null;\n    }\n}\n","import { columns } from '../models/columnModel';\nimport { setupTaskDragAndDrop, removeTaskDragAndDrop } from '../utils/dragAndDrop';\nimport { patchTaskTitle, patchTaskDescription, deleteTask, addTaskToColumn } from '../services/taskService';\nimport { loadColumns } from '../services/columnService';\nimport { setupColumnsDragAndDrop } from '../utils/dragAndDrop';\nexport function createTaskElement(task) {\n    const taskElement = document.createElement('div');\n    taskElement.classList.add('task', 'item');\n    taskElement.setAttribute('draggable', 'true');\n    if (task._id) {\n        taskElement.id = task._id;\n    }\n    const taskHeader = document.createElement('div');\n    taskHeader.classList.add('taskHeader');\n    const taskTitle = document.createElement('div');\n    taskTitle.classList.add('taskTitle');\n    taskTitle.textContent = task.title;\n    const taskDots = document.createElement('div');\n    taskDots.classList.add('menuDots');\n    taskDots.innerHTML = \"\\u22EE\";\n    taskDots.setAttribute('draggable', 'false');\n    taskHeader.appendChild(taskTitle);\n    taskHeader.appendChild(taskDots);\n    const taskDescription = document.createElement('div');\n    taskDescription.classList.add('taskDescription');\n    taskDescription.textContent = task.description;\n    taskElement.appendChild(taskHeader);\n    taskElement.appendChild(taskDescription);\n    setupTaskDragAndDrop(task);\n    setupMenuDialog(taskDots, taskTitle, taskDescription, taskElement);\n    return taskElement;\n}\nexport function setupMenuDialog(taskDots, taskTitle, taskDescription, taskElement) {\n    taskDots.onclick = () => {\n        let taskDialog = taskDots.querySelector('.menuDialog');\n        if (taskDialog) {\n            taskDialog.style.display = taskDialog.style.display === 'block' ? 'none' : 'block';\n        }\n        else {\n            taskDialog = document.createElement('div');\n            taskDialog.classList.add('menuDialog');\n            const titleHeader = document.createElement('h2');\n            titleHeader.textContent = 'Column dialog';\n            taskDialog.appendChild(titleHeader);\n            const editTaskTitle = document.createElement('button');\n            editTaskTitle.innerHTML = 'Edit title';\n            taskDialog.appendChild(editTaskTitle);\n            editTaskTitle.onclick = () => {\n                taskTitle.innerHTML = '';\n                const inputTitle = document.createElement('input');\n                inputTitle.type = 'text';\n                inputTitle.value = taskTitle.textContent || '';\n                taskTitle.appendChild(inputTitle);\n                inputTitle.focus();\n                const saveTitle = async () => {\n                    taskTitle.textContent = inputTitle.value;\n                    taskDialog.style.display = 'none';\n                    const columnElement = taskElement.parentElement;\n                    if (columnElement) {\n                        const columnId = columnElement.id;\n                        const columnIndex = columns.findIndex(column => column._id === columnId);\n                        if (columnIndex !== -1) {\n                            const taskId = taskElement.id;\n                            if (taskId) {\n                                await patchTaskTitle(columnElement.id, taskId, inputTitle.value);\n                                const taskIndex = columns[columnIndex].tasks.findIndex(task => task._id === taskId);\n                                removeTaskDragAndDrop(columns[columnIndex].tasks[taskIndex]);\n                                setupTaskDragAndDrop(columns[columnIndex].tasks[taskIndex]);\n                            }\n                        }\n                    }\n                };\n                const saveButton = document.createElement('button');\n                saveButton.textContent = 'Save';\n                taskDialog.appendChild(saveButton);\n                saveButton.onclick = saveTitle;\n                inputTitle.addEventListener('keypress', (e) => {\n                    if (e.key === 'Enter') {\n                        saveTitle();\n                    }\n                });\n            };\n            const editTaskDescription = document.createElement('button');\n            editTaskDescription.innerHTML = 'Edit desc';\n            taskDialog.appendChild(editTaskDescription);\n            editTaskDescription.onclick = () => {\n                taskDescription.innerHTML = '';\n                const inputTitle = document.createElement('input');\n                inputTitle.type = 'text';\n                inputTitle.value = taskDescription.textContent || '';\n                taskDescription.appendChild(inputTitle);\n                inputTitle.focus();\n                const saveDescription = () => {\n                    taskDescription.textContent = inputTitle.value;\n                    taskDialog.style.display = 'none';\n                    const columnElement = taskElement.parentElement;\n                    if (columnElement) {\n                        const columnId = columnElement.id;\n                        patchTaskDescription(columnElement.id, taskElement.id, inputTitle.value);\n                        const columnIndex = columns.findIndex(column => column._id === columnId);\n                        if (columnIndex !== -1) {\n                            const taskId = taskElement.id;\n                            if (taskId) {\n                                const taskIndex = columns[columnIndex].tasks.findIndex(task => task._id === taskId);\n                                removeTaskDragAndDrop(columns[columnIndex].tasks[taskIndex]);\n                                setupTaskDragAndDrop(columns[columnIndex].tasks[taskIndex]);\n                            }\n                        }\n                    }\n                };\n                const saveButton = document.createElement('button');\n                saveButton.textContent = 'Save';\n                taskDialog.appendChild(saveButton);\n                saveButton.onclick = saveDescription;\n                inputTitle.addEventListener('keypress', (e) => {\n                    if (e.key === 'Enter') {\n                        saveDescription();\n                    }\n                });\n            };\n            const deleteTaskButton = document.createElement('button');\n            deleteTaskButton.innerHTML = 'Delete task';\n            taskDialog.appendChild(deleteTaskButton);\n            deleteTaskButton.onclick = async () => {\n                const columnElement = taskElement.parentElement;\n                if (columnElement) {\n                    const columnId = columnElement.id;\n                    const columnIndex = columns.findIndex(column => column._id === columnId);\n                    if (columnIndex !== -1) {\n                        const taskId = taskElement.id;\n                        if (taskId) {\n                            deleteTask(columnElement.id, taskId);\n                            const taskToBeRemoved = document.getElementById(taskId);\n                            if (taskToBeRemoved) {\n                                taskToBeRemoved.remove();\n                            }\n                        }\n                    }\n                }\n            };\n        }\n        taskDots.appendChild(taskDialog);\n    };\n}\nexport async function submitTask(columnSelected, title, description) {\n    const columnElement = document.getElementById(columnSelected);\n    if (!columnElement) {\n        console.error('columnElement is null:', columnElement);\n        return null;\n    }\n    try {\n        const response = await addTaskToColumn(columnSelected, title, description);\n        if (!response.success) {\n            console.error('Error: response.success === false');\n            return null;\n        }\n        await loadColumns();\n        const columnData = columns.find(column => column._id === columnSelected);\n        if (!columnData) {\n            console.error(`Column with ID ${columnSelected} not found`);\n            return null;\n        }\n        const taskToCreate = columnData.tasks.find(task => task.title === title);\n        if (!taskToCreate) {\n            console.error(\"Task not found!\");\n            return null;\n        }\n        const taskElement = createTaskElement(taskToCreate);\n        columnElement.appendChild(taskElement);\n        setupColumnsDragAndDrop();\n        setupTaskDragAndDrop(taskToCreate);\n        const dialog = document.getElementById('dialog');\n        if (dialog) {\n            dialog.remove();\n        }\n        else {\n            console.error('Dialog not found!');\n        }\n        return taskElement;\n    }\n    catch (error) {\n        console.error(\"Error adding task:\", error);\n        return null;\n    }\n}\n","import { columns } from '../models/columnModel';\nimport { patchColumn, deleteColumn, postColumn, loadColumns } from '../services/columnService';\nimport { setupColumnsDragAndDrop } from '../utils/dragAndDrop';\nimport { createTaskElement } from '../components/taskRenderer';\nexport function renderColumn(column) {\n    const itemContainer = document.getElementById('itemContainer');\n    if (!itemContainer) {\n        console.error('Item container not found');\n        return;\n    }\n    const columnElement = document.createElement('div');\n    columnElement.classList.add('column');\n    const columnId = column._id;\n    if (columnId) {\n        columnElement.id = columnId;\n    }\n    const columnTitle = document.createElement('div');\n    columnTitle.classList.add('columnTitle');\n    columnTitle.textContent = column.title;\n    const menuDots = document.createElement('div');\n    menuDots.classList.add('menuDots');\n    menuDots.innerHTML = \"\\u22EE\";\n    menuDots.onclick = () => {\n        let columnDialog = menuDots.querySelector('.menuDialog');\n        if (columnDialog) {\n            columnDialog.style.display = columnDialog.style.display === 'block' ? 'none' : 'block';\n        }\n        else {\n            columnDialog = document.createElement('div');\n            columnDialog.classList.add('menuDialog');\n            const titleHeader = document.createElement('h2');\n            titleHeader.textContent = 'Column dialog';\n            columnDialog.appendChild(titleHeader);\n            const editColumnTitle = document.createElement('button');\n            editColumnTitle.innerHTML = 'Edit';\n            editColumnTitle.onclick = () => {\n                columnTitle.innerHTML = '';\n                const inputTitle = document.createElement('input');\n                inputTitle.type = 'text';\n                inputTitle.value = columnTitle.textContent || '';\n                columnTitle.appendChild(inputTitle);\n                inputTitle.focus();\n                const saveButton = document.createElement('button');\n                saveButton.textContent = 'Save';\n                columnDialog.appendChild(saveButton);\n                saveButton.onclick = () => {\n                    columnTitle.textContent = inputTitle.value;\n                    columnDialog.style.display = 'none';\n                    const columnIndex = columns.findIndex(col => col._id === column._id);\n                    if (column._id) {\n                        patchColumn(column._id, inputTitle.value);\n                    }\n                    if (columnIndex !== -1) {\n                        columns.splice(columnIndex, 1, Object.assign(Object.assign({}, columns[columnIndex]), { title: inputTitle.value }));\n                    }\n                };\n                inputTitle.addEventListener('keypress', (e) => {\n                    if (e.key === 'Enter') {\n                        columnTitle.textContent = inputTitle.value;\n                        columnDialog.style.display = 'none';\n                        const columnIndex = columns.findIndex(col => col._id === column._id);\n                        if (columnIndex !== -1) {\n                            columns.splice(columnIndex, 1, Object.assign(Object.assign({}, columns[columnIndex]), { title: inputTitle.value }));\n                        }\n                    }\n                });\n            };\n            const deleteColumnButton = document.createElement('button');\n            deleteColumnButton.innerHTML = 'Delete';\n            deleteColumnButton.onclick = async () => {\n                const columnIndex = columns.findIndex(col => col._id === column._id);\n                if (column._id) {\n                    await deleteColumn(column._id);\n                    const columnToBeRemoved = document.getElementById(column._id);\n                    if (columnToBeRemoved) {\n                        columnToBeRemoved.remove();\n                    }\n                }\n            };\n            columnDialog.appendChild(editColumnTitle);\n            columnDialog.appendChild(deleteColumnButton);\n            menuDots.appendChild(columnDialog);\n            columnDialog.style.display = 'block';\n            columnDialog.onclick = (e) => {\n                e.stopPropagation();\n            };\n        }\n    };\n    const columnTitleContainer = document.createElement('div');\n    columnTitleContainer.classList.add('columnTitleContainer');\n    columnTitleContainer.appendChild(columnTitle);\n    columnTitleContainer.appendChild(menuDots);\n    columnElement.appendChild(columnTitleContainer);\n    if (column.tasks && Array.isArray(column.tasks)) {\n        column.tasks.forEach(task => {\n            const taskElement = createTaskElement(task);\n            columnElement.appendChild(taskElement);\n        });\n    }\n    itemContainer.appendChild(columnElement);\n    setupColumnsDragAndDrop();\n}\nexport async function submitColumn(titleInput) {\n    const title = titleInput.value;\n    if (titleInput && title) {\n        const columnData = { title, tasks: [] };\n        await postColumn(columnData);\n        await loadColumns();\n        const columnToRender = columns.find(column => column.title === title);\n        if (columnToRender) {\n            renderColumn(columnToRender);\n        }\n        else {\n            console.log('Column does not exist: ', columnToRender);\n            return null;\n        }\n    }\n    else {\n        console.error('Title cannot be empty');\n    }\n    if (titleInput)\n        titleInput.value = '';\n    const dialog = document.getElementById('dialog');\n    if (dialog) {\n        dialog.remove();\n    }\n    else {\n        console.error('Dialog not found!');\n    }\n}\n","import { columns } from './models/columnModel';\nimport { loadColumns } from './services/columnService';\nimport { setupColumnsDragAndDrop, setupTaskDragAndDrop } from './utils/dragAndDrop';\nimport { renderColumn, submitColumn } from './components/columnRenderer';\nimport { submitTask } from './components/taskRenderer';\nwindow.onload = async () => {\n    await loadColumns();\n    setupColumnsDragAndDrop();\n    if (columns && Array.isArray(columns)) {\n        columns.forEach(column => {\n            renderColumn(column);\n            column.tasks.forEach(task => setupTaskDragAndDrop(task));\n        });\n    }\n    window.addColumn = addColumn;\n    window.addTask = addTask;\n};\nexport function addColumn() {\n    const dialog = document.createElement('div');\n    dialog.id = 'dialog';\n    dialog.className = 'dialog';\n    const dialogContent = document.createElement('div');\n    dialogContent.className = 'dialog-content';\n    const closeButton = document.createElement('span');\n    closeButton.className = 'close';\n    closeButton.textContent = 'x';\n    closeButton.onclick = () => {\n        dialog.remove();\n    };\n    const titleHeader = document.createElement('h2');\n    titleHeader.textContent = 'Add New Column';\n    const titleLabel = document.createElement('label');\n    titleLabel.setAttribute('for', 'columnTitle');\n    titleLabel.textContent = 'Title:';\n    const titleInput = document.createElement('input');\n    titleInput.type = 'text';\n    titleInput.placeholder = 'Enter column title';\n    const submitButton = document.createElement('button');\n    submitButton.textContent = 'Submit';\n    submitButton.onclick = () => submitColumn(titleInput);\n    dialogContent.appendChild(closeButton);\n    dialogContent.appendChild(titleHeader);\n    dialogContent.appendChild(titleLabel);\n    dialogContent.appendChild(titleInput);\n    dialogContent.appendChild(submitButton);\n    dialog.appendChild(dialogContent);\n    document.body.appendChild(dialog);\n    titleInput.value = '';\n    dialog.style.display = 'block';\n}\nexport async function addTask() {\n    const dialog = document.createElement('div');\n    dialog.id = 'dialog';\n    dialog.className = 'dialog';\n    const dialogContent = document.createElement('div');\n    dialogContent.className = 'dialog-content';\n    const closeButton = document.createElement('span');\n    closeButton.className = 'close';\n    closeButton.textContent = 'x';\n    closeButton.onclick = () => {\n        dialog.remove();\n    };\n    const titleHeader = document.createElement('h2');\n    titleHeader.textContent = 'Add New Task';\n    const titleLabel = document.createElement('label');\n    titleLabel.setAttribute('for', 'taskTitle');\n    titleLabel.textContent = 'Title:';\n    const titleInput = document.createElement('input');\n    titleInput.type = 'text';\n    titleInput.id = 'taskTitle';\n    titleInput.placeholder = 'Enter task title';\n    const descriptionLabel = document.createElement('label');\n    descriptionLabel.setAttribute('for', 'taskDescription');\n    descriptionLabel.textContent = 'Description:';\n    const descriptionInput = document.createElement('input');\n    descriptionInput.type = 'text';\n    descriptionInput.id = 'taskDescription';\n    descriptionInput.placeholder = 'Enter task description';\n    const columnLabel = document.createElement('div');\n    columnLabel.textContent = 'Select Column:';\n    const columnSelect = document.createElement('select');\n    columnSelect.id = 'columnSelect';\n    if (columns && Array.isArray(columns)) {\n        columns.forEach(column => {\n            const option = document.createElement('option');\n            if (column._id) {\n                option.value = column._id;\n                option.textContent = column.title;\n                columnSelect.appendChild(option);\n            }\n        });\n    }\n    const submitButton = document.createElement('button');\n    submitButton.textContent = 'Submit';\n    submitButton.onclick = () => submitTask(columnSelect.value, titleInput.value, descriptionInput.value);\n    dialogContent.appendChild(closeButton);\n    dialogContent.appendChild(titleHeader);\n    dialogContent.appendChild(titleLabel);\n    dialogContent.appendChild(titleInput);\n    dialogContent.appendChild(descriptionLabel);\n    dialogContent.appendChild(descriptionInput);\n    dialogContent.appendChild(columnLabel);\n    dialogContent.appendChild(columnSelect);\n    dialogContent.appendChild(submitButton);\n    dialog.appendChild(dialogContent);\n    document.body.appendChild(dialog);\n    dialog.style.display = 'block';\n}\n"],"names":["columns","url","async","loadColumns","fetchedColumns","getColumnUrl","concat","response","fetch","ok","Error","status","json","error","console","message","getColumns","length","push","deleteTask","columnId","taskId","deleteTaskUrl","method","headers","log","updateTaskOrder","tasks","updateTaskOrderUrl","body","JSON","stringify","statusText","sourceColumnId","placeholder","setupColumnsDragAndDrop","document","querySelectorAll","forEach","column","addEventListener","e","preventDefault","dataTransfer","dropEffect","currentTarget","dragging","querySelector","applyAfter","posY","elements","Array","prototype","slice","call","element","box","getBoundingClientRect","top","height","getNewPosition","clientY","insertAdjacentElement","lastElementChild","appendChild","handleDragOver","classList","add","handleDragEnter","remove","handleDragLeave","_a","data","getData","draggedElement","getElementById","handleDrop","setupTaskDragAndDrop","task","_id","taskElement","parentColumn","closest","setAttribute","id","target","effectAllowed","setData","columnElement","createElement","style","offsetHeight","handleDragStart","targetColumnId","columnIndex","findIndex","allTasks","newIndex","from","indexOf","currentIndex","t","splice","title","description","replaceWith","handleDragEnd","removeTaskDragAndDrop","clone","cloneNode","createTaskElement","taskHeader","taskTitle","textContent","taskDots","innerHTML","taskDescription","onclick","taskDialog","display","titleHeader","editTaskTitle","inputTitle","type","value","focus","saveTitle","parentElement","patchTaskTitleUrl","patchTaskTitle","taskIndex","saveButton","key","editTaskDescription","saveDescription","patchTaskDescriptionUrl","patchTaskDescription","deleteTaskButton","taskToBeRemoved","setupMenuDialog","renderColumn","itemContainer","columnTitle","menuDots","columnDialog","editColumnTitle","col","patchColumnUrl","patchColumn","Object","assign","deleteColumnButton","deleteColumnUrl","deleteColumn","columnToBeRemoved","stopPropagation","columnTitleContainer","isArray","addColumn","dialog","className","dialogContent","closeButton","titleLabel","titleInput","submitButton","columnData","newColumn","postColumnUrl","postColumn","columnToRender","find","submitColumn","addTask","descriptionLabel","descriptionInput","columnLabel","columnSelect","option","columnSelected","success","addTaskToColumn","taskToCreate","submitTask","window","onload"],"sourceRoot":""}